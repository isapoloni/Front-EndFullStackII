import {
  contains,
  dequal,
  qsa
} from "./chunk-K2TANFYZ.js";
import {
  css_default,
  ownerDocument,
  require_classnames,
  transitionEnd,
  useCallbackRef,
  useEventCallback,
  useGlobalListener,
  useMergedRefs_default,
  useMounted,
  useTimeout,
  useUncontrolledProp,
  useWillUnmount
} from "./chunk-UCCRB3ZK.js";
import {
  ENTERING,
  EXITED,
  EXITING,
  Transition_default
} from "./chunk-QZZHP5KK.js";
import {
  require_prop_types
} from "./chunk-H34UXRLQ.js";
import {
  __export,
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/react-widgets/esm/DropdownList.js
var import_classnames10 = __toESM(require_classnames());
var import_prop_types5 = __toESM(require_prop_types());
var import_react24 = __toESM(require_react());

// node_modules/react-widgets/esm/AddToListOption.js
var PropTypes2 = __toESM(require_prop_types());
var import_react3 = __toESM(require_react());

// node_modules/react-widgets/esm/ListOption.js
var import_classnames = __toESM(require_classnames());
var import_prop_types = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());

// node_modules/react-widgets/esm/FocusListContext.js
var import_react = __toESM(require_react());
var FocusListContext = import_react.default.createContext(null);
var defaultOpts = {
  behavior: "stop"
};
function useListOption(dataItem2) {
  const ctx = (0, import_react.useContext)(FocusListContext);
  const prevElement = (0, import_react.useRef)(null);
  const ref = (0, import_react.useRef)(null);
  (0, import_react.useLayoutEffect)(() => () => {
    ctx == null ? void 0 : ctx.map.delete(ref.current);
  }, []);
  (0, import_react.useLayoutEffect)(() => {
    if (prevElement.current !== ref.current) {
      ctx == null ? void 0 : ctx.map.delete(prevElement.current);
    }
    prevElement.current = ref.current;
    if (ref.current && (ctx == null ? void 0 : ctx.map.get(ref.current)) !== dataItem2) {
      ctx == null ? void 0 : ctx.map.set(ref.current, dataItem2);
    }
  });
  const focused = dataItem2 === (ctx == null ? void 0 : ctx.focusedItem);
  return [ref, focused, focused ? ctx == null ? void 0 : ctx.activeId : void 0];
}
var useFocusList = ({
  scope: listRef,
  anchorItem,
  focusFirstItem: _focusFirstItem = false,
  scopeSelector: _scopeSelector = "",
  activeId
}) => {
  const map = (0, import_react.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  const [focusedItem, setFocusedItem] = (0, import_react.useState)();
  const itemSelector = `${_scopeSelector} [data-rw-focusable]`.trim();
  const get = () => {
    const items = qsa(listRef.current, itemSelector);
    return [items, items.find((e) => e.dataset.rwFocused === "")];
  };
  const list = (0, import_react.useMemo)(() => {
    return {
      size() {
        const [items] = get();
        return items.length;
      },
      get,
      toDataItem: (el) => map.get(el),
      first() {
        const [[first]] = get();
        return first;
      },
      focus(el) {
        if (!el || map.has(el))
          setFocusedItem(el ? map.get(el) : void 0);
      },
      last() {
        const [items] = get();
        return items[items.length - 1];
      },
      next({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = items.indexOf(focusedItem2) + 1;
        if (nextIdx >= items.length) {
          if (behavior === "loop")
            return items[0];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      },
      prev({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = Math.max(0, items.indexOf(focusedItem2)) - 1;
        if (nextIdx < 0) {
          if (behavior === "loop")
            return items[items.length - 1];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      }
    };
  }, []);
  (0, import_react.useLayoutEffect)(() => {
    if (!anchorItem) {
      list.focus(null);
      return;
    }
    const element = get()[0].find((el) => list.toDataItem(el) === anchorItem);
    list.focus(element);
  }, [anchorItem]);
  (0, import_react.useLayoutEffect)(() => {
    if (!listRef.current)
      return;
    const [, focusedElement] = get();
    const hasItem = focusedElement != null;
    if (!hasItem && _focusFirstItem || hasItem && !listRef.current.contains(focusedElement)) {
      if (_focusFirstItem)
        list.focus(list.first());
      else
        list.focus(null);
    }
  });
  const context = (0, import_react.useMemo)(() => ({
    map,
    focusedItem,
    activeId
  }), [focusedItem, activeId]);
  list.context = context;
  list.getFocused = (0, import_react.useCallback)(() => focusedItem, [focusedItem]);
  list.hasFocused = () => focusedItem !== void 0;
  return list;
};

// node_modules/react-widgets/esm/ListOption.js
var _excluded = ["className", "children", "dataItem", "selected", "disabled", "onSelect", "searchTerm"];
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes = {
  activeId: import_prop_types.default.string,
  dataItem: import_prop_types.default.any,
  selected: import_prop_types.default.bool.isRequired,
  onSelect: import_prop_types.default.func.isRequired,
  component: import_prop_types.default.any
};
function ListOption(_ref) {
  let {
    className,
    children,
    dataItem: dataItem2,
    selected,
    disabled: disabled2,
    onSelect
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const [ref, focused, id] = useListOption(dataItem2);
  const handleSelect = (event) => {
    if (onSelect && !disabled2)
      onSelect(dataItem2, event);
  };
  let classes = {
    "rw-state-focus": focused,
    "rw-state-selected": selected,
    "rw-state-disabled": disabled2
  };
  return import_react2.default.createElement("div", _extends({
    id,
    ref,
    role: "option",
    "data-rw-option": "",
    "data-rw-focused": focused ? "" : void 0,
    "data-rw-focusable": !disabled2 ? "" : void 0,
    tabIndex: -1,
    "aria-selected": !!selected,
    className: (0, import_classnames.default)("rw-list-option", className, classes),
    onClick: handleSelect
  }, props), children);
}
ListOption.propTypes = propTypes;
var ListOption_default = ListOption;

// node_modules/react-widgets/esm/AddToListOption.js
var _excluded2 = ["children"];
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var CREATE_OPTION = {};
var propTypes2 = {
  searchTerm: PropTypes2.string,
  focused: PropTypes2.bool,
  onSelect: PropTypes2.func.isRequired,
  activeId: PropTypes2.string
};
function AddToListOption(_ref) {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded2);
  return import_react3.default.createElement(ListOption_default, _extends2({}, props, {
    dataItem: CREATE_OPTION,
    className: "rw-list-option-create",
    selected: false
  }), children);
}
AddToListOption.propTypes = propTypes2;
var AddToListOption_default = AddToListOption;

// node_modules/react-widgets/esm/DropdownListInput.js
var import_classnames2 = __toESM(require_classnames());
var import_react4 = __toESM(require_react());
var DropdownListInput = import_react4.default.forwardRef(function({
  name,
  autoComplete,
  value,
  allowSearch,
  placeholder,
  textAccessor,
  dataKeyAccessor,
  searchTerm,
  onSearch,
  onAutofill,
  onAutofillChange,
  renderValue,
  disabled: disabled2,
  readOnly
}, ref) {
  const [autofilling, setAutofilling] = (0, import_react4.useState)(false);
  const searchRef = (0, import_react4.useRef)(null);
  const handleAutofillDetect = ({
    animationName
  }) => {
    let autofilling2;
    if (animationName === "react-widgets-autofill-start")
      autofilling2 = true;
    else if (animationName === "react-widgets-autofill-cancel")
      autofilling2 = false;
    else
      return;
    setAutofilling(autofilling2);
    onAutofill(autofilling2);
  };
  const handleAutofill = (e) => {
    setAutofilling(false);
    onAutofillChange(e);
  };
  let dataKey = dataKeyAccessor(value);
  let text = value == null ? "" : textAccessor(value);
  let strValue = String(dataKey != null ? dataKey : "");
  if (strValue === String({}))
    strValue = "";
  const inputValue = !value && placeholder ? import_react4.default.createElement("span", {
    className: "rw-placeholder"
  }, placeholder) : renderValue ? renderValue({
    item: value,
    dataKey,
    text
  }) : text;
  (0, import_react4.useImperativeHandle)(ref, () => ({
    focus() {
      if (searchRef.current)
        searchRef.current.focus();
    }
  }));
  const style = autofilling ? {
    display: "none"
  } : void 0;
  return import_react4.default.createElement("div", {
    className: "rw-dropdown-list-input"
  }, autoComplete !== "off" && import_react4.default.createElement("input", {
    name,
    tabIndex: -1,
    disabled: disabled2,
    readOnly,
    value: strValue == null ? "" : strValue,
    autoComplete,
    onChange: handleAutofill,
    onAnimationStart: handleAutofillDetect,
    "aria-hidden": !autofilling,
    className: (0, import_classnames2.default)("rw-detect-autofill", !autofilling && "rw-sr")
  }), import_react4.default.createElement(import_react4.default.Fragment, null, allowSearch && import_react4.default.createElement("input", {
    ref: searchRef,
    disabled: disabled2,
    readOnly,
    style,
    className: "rw-dropdownlist-search",
    autoComplete: "off",
    value: searchTerm || "",
    size: (searchTerm || "").length + 2,
    onChange: onSearch
  }), !searchTerm && import_react4.default.createElement("span", {
    className: "rw-dropdown-list-value",
    style
  }, inputValue)));
});
DropdownListInput.displayName = "DropdownListInput";
var DropdownListInput_default = DropdownListInput;

// node_modules/react-widgets/esm/Icon.js
var React5 = __toESM(require_react());
var caretUp = React5.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M288.66 352H31.34c-17.82 0-26.74-21.54-14.14-34.14L145.86 189.2a20 20 0 0 1 28.28 0L302.8 317.86c12.6 12.6 3.68 34.14-14.14 34.14z"
}));
var caretDown = React5.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
}));
var chevronRight = React5.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M285.48 272.97L91.13 467.31a24 24 0 0 1-33.94 0l-22.67-22.66a24 24 0 0 1-.04-33.9L188.5 256 34.48 101.25a24 24 0 0 1 .04-33.9L57.2 44.7a24 24 0 0 1 33.94 0l194.35 194.34a24 24 0 0 1 0 33.94z"
}));
var chevronLeft = React5.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M34.52 239.03L228.87 44.69a24 24 0 0 1 33.94 0l22.67 22.67a24 24 0 0 1 .04 33.9L131.49 256l154.02 154.75a24 24 0 0 1-.04 33.9l-22.67 22.67a24 24 0 0 1-33.94 0L34.52 272.97a24 24 0 0 1 0-33.94z"
}));
var calendar = React5.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 448 512",
  className: "rw-i-calendar",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"
}));
var clock = React5.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 512 512",
  className: "rw-i-clock",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6a12 12 0 0 1 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"
}));
var times = React5.createElement("svg", {
  height: ".8em",
  fill: "currentcolor",
  viewBox: "0 0 352 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  d: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
}));
var clear = React5.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentColor",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, React5.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z"
}));
var Spinner = React5.createElement("svg", {
  height: "1.4em",
  viewBox: "0 0 50 50",
  xmlSpace: "preserve",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React5.createElement("path", {
  fill: "currentcolor",
  d: "M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"
}, React5.createElement("animateTransform", {
  attributeType: "xml",
  attributeName: "transform",
  type: "rotate",
  from: "0 25 25",
  to: "360 25 25",
  dur: "0.6s",
  repeatCount: "indefinite"
})));

// node_modules/react-widgets/esm/List.js
var import_classnames4 = __toESM(require_classnames());
var import_prop_types3 = __toESM(require_prop_types());
var import_react12 = __toESM(require_react());

// node_modules/react-widgets/esm/ListOptionGroup.js
var import_classnames3 = __toESM(require_classnames());
var import_prop_types2 = __toESM(require_prop_types());
var import_react5 = __toESM(require_react());
var propTypes3 = {
  className: import_prop_types2.default.string,
  component: import_prop_types2.default.string
};
function ListOptionGroup({
  children,
  className,
  component = "div"
}) {
  let Tag = component;
  return import_react5.default.createElement(Tag, {
    tabIndex: "-1",
    role: "separator",
    className: (0, import_classnames3.default)(className, "rw-list-optgroup")
  }, children);
}
ListOptionGroup.propTypes = propTypes3;
var ListOptionGroup_default = ListOptionGroup;

// node_modules/react-widgets/esm/messages.js
var React7 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var messages = {
  moveToday: "Today",
  moveBack: "Navigate back",
  moveForward: "Navigate forward",
  dateButton: "Select date",
  openCombobox: "open combobox",
  emptyList: "There are no items in this list",
  emptyFilter: "The filter returned no results",
  createOption: (_value, searchTerm) => [" Create option", searchTerm && " ", searchTerm && React7.createElement("strong", {
    key: "_"
  }, `"${searchTerm}"`)],
  tagsLabel: "Selected items",
  removeLabel: "Remove selected item",
  noneSelected: "no selected items",
  selectedItems: (labels) => `Selected items: ${labels.join(", ")}`,
  // number
  increment: "Increment value",
  decrement: "Decrement value"
};
var DEFAULTS = {};
function getMessages(defaults = DEFAULTS) {
  let processed = {};
  Object.keys(messages).forEach((message2) => {
    let value = defaults[message2];
    if (value == null)
      value = messages[message2];
    processed[message2] = typeof value === "function" ? value : () => value;
  });
  return processed;
}
var useMessagesWithDefaults = (defaults) => (0, import_react6.useMemo)(() => getMessages(defaults), [defaults]);

// node_modules/react-widgets/esm/PropTypes.js
var PropTypes4 = __toESM(require_prop_types());
var elementType2 = PropTypes4.elementType;
var disabled = Object.assign((...args) => PropTypes4.bool(...args), {
  acceptsArray: PropTypes4.oneOfType([PropTypes4.bool, PropTypes4.array])
});
var accessor = PropTypes4.oneOfType([PropTypes4.string, PropTypes4.func]);
var message = PropTypes4.oneOfType([PropTypes4.node, PropTypes4.string, PropTypes4.func]);

// node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction = false;
function warning(condition, message2) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message2;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning;

// node_modules/react-widgets/esm/_.js
function toItemArray(a) {
  if (Array.isArray(a))
    return a;
  return [];
}
var makeArray = (obj, excludeNull = true) => {
  const result = [];
  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);
};
var has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;
function chunk(array2, chunkSize) {
  let index = 0;
  let length = array2 ? array2.length : 0;
  let result = [];
  chunkSize = Math.max(+chunkSize || 1, 1);
  while (index < length)
    result.push(array2.slice(index, index += chunkSize));
  return result;
}
function groupBySortedKeys(groupBy, data, _keys = []) {
  const iter = typeof groupBy === "function" ? groupBy : (item) => item[groupBy];
  tiny_warning_esm_default(typeof groupBy !== "string" || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a property \`${groupBy}\` that doesn't exist in the dataset items, this may be a typo`);
  const groups = /* @__PURE__ */ new Map();
  data.forEach((item) => {
    let group = iter(item);
    if (groups.has(group))
      groups.get(group).push(item);
    else
      groups.set(group, [item]);
  });
  return Array.from(groups);
}

// node_modules/react-widgets/esm/WidgetHelpers.js
var import_react7 = __toESM(require_react());
var idCount = 0;
function uniqueId(prefix) {
  return "" + ((prefix == null ? "" : prefix) + ++idCount);
}
function notify(handler, args) {
  if (handler)
    handler.apply(null, args);
}
var useInstanceId = (otherId, suffix = "") => {
  const id = (0, import_react7.useRef)();
  if (!id.current)
    id.current = uniqueId("rw_");
  return (otherId || id.current) + suffix;
};
function useFirstFocusedRender(focused, open) {
  const ref = (0, import_react7.useRef)(false);
  return ref.current || (focused || !!open) && (ref.current = true);
}

// node_modules/@restart/hooks/esm/useCustomEffect.js
var import_react8 = __toESM(require_react());
function useCustomEffect(effect, dependencies, isEqualOrOptions) {
  var isMounted = useMounted();
  var _ref = typeof isEqualOrOptions === "function" ? {
    isEqual: isEqualOrOptions
  } : isEqualOrOptions, isEqual2 = _ref.isEqual, _ref$effectHook = _ref.effectHook, effectHook = _ref$effectHook === void 0 ? import_react8.useEffect : _ref$effectHook;
  var dependenciesRef = (0, import_react8.useRef)();
  dependenciesRef.current = dependencies;
  var cleanupRef = (0, import_react8.useRef)(null);
  effectHook(function() {
    if (cleanupRef.current === null) {
      var cleanup = effect();
      cleanupRef.current = function() {
        if (isMounted() && isEqual2(dependenciesRef.current, dependencies)) {
          return;
        }
        cleanupRef.current = null;
        if (cleanup)
          cleanup();
      };
    }
    return cleanupRef.current;
  });
  (0, import_react8.useDebugValue)(effect);
}
var useCustomEffect_default = useCustomEffect;

// node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
var import_react10 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useStableMemo.js
var import_react9 = __toESM(require_react());
function isEqual(a, b) {
  if (a.length !== b.length)
    return false;
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
function useStableMemo(factory, deps) {
  var isValid = true;
  var valueRef = (0, import_react9.useRef)();
  if (!valueRef.current) {
    valueRef.current = {
      deps,
      result: factory()
    };
  } else {
    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));
  }
  var cache = isValid ? valueRef.current : {
    deps,
    result: factory()
  };
  valueRef.current = cache;
  return cache.result;
}

// node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
function useUpdateImmediateEffect(effect, deps) {
  var firstRef = (0, import_react10.useRef)(true);
  var tearDown = (0, import_react10.useRef)();
  useWillUnmount(function() {
    if (tearDown.current)
      tearDown.current();
  });
  useStableMemo(function() {
    if (firstRef.current) {
      firstRef.current = false;
      return;
    }
    if (tearDown.current)
      tearDown.current();
    tearDown.current = effect();
  }, deps);
}
var useUpdateImmediateEffect_default = useUpdateImmediateEffect;

// node_modules/@restart/hooks/esm/useImmediateUpdateEffect.js
var useImmediateUpdateEffect_default = useUpdateImmediateEffect_default;

// node_modules/@restart/hooks/esm/useMutationObserver.js
var import_react11 = __toESM(require_react());
function isDepsEqual(_ref, _ref2) {
  var nextElement = _ref[0], nextConfig = _ref[1];
  var prevElement = _ref2[0], prevConfig = _ref2[1];
  return nextElement === prevElement && dequal(nextConfig, prevConfig);
}
function useMutationObserver(element, config, callback) {
  var _useState = (0, import_react11.useState)(null), records = _useState[0], setRecords = _useState[1];
  var handler = useEventCallback(callback || setRecords);
  useCustomEffect_default(function() {
    if (!element)
      return;
    var observer = new MutationObserver(handler);
    observer.observe(element, config);
    return function() {
      observer.disconnect();
    };
  }, [element, config], {
    isEqual: isDepsEqual,
    // Intentionally done in render, otherwise observer will miss any
    // changes made to the DOM during this update
    effectHook: useImmediateUpdateEffect_default
  });
  return callback ? void 0 : records || [];
}
var useMutationObserver_default = useMutationObserver;

// node_modules/react-widgets/esm/List.js
var _excluded3 = ["multiple", "data", "value", "onChange", "accessors", "className", "messages", "disabled", "renderItem", "renderGroup", "searchTerm", "groupBy", "elementRef", "optionComponent", "renderList"];
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var whitelist = ["style", "className", "role", "id", "autocomplete", "size", "tabIndex", "maxLength", "name"];
var whitelistRegex = [/^aria-/, /^data-/, /^on[A-Z]\w+/];
function pickElementProps(props) {
  const result = {};
  Object.keys(props).forEach((key) => {
    if (whitelist.indexOf(key) !== -1 || whitelistRegex.some((r) => !!key.match(r)))
      result[key] = props[key];
  });
  return result;
}
var propTypes4 = {
  data: import_prop_types3.default.array,
  dataKey: accessor,
  textField: accessor,
  onSelect: import_prop_types3.default.func,
  onMove: import_prop_types3.default.func,
  onHoverOption: import_prop_types3.default.func,
  optionComponent: import_prop_types3.default.elementType,
  renderItem: import_prop_types3.default.func,
  renderGroup: import_prop_types3.default.func,
  focusedItem: import_prop_types3.default.any,
  selectedItem: import_prop_types3.default.any,
  searchTerm: import_prop_types3.default.string,
  disabled: disabled.acceptsArray,
  messages: import_prop_types3.default.shape({
    emptyList: import_prop_types3.default.func.isRequired
  })
};
var useScrollFocusedIntoView = (element, observeChanges = false) => {
  const scrollIntoView = (0, import_react12.useCallback)(() => {
    if (!element)
      return;
    let selectedItem = element.querySelector("[data-rw-focused]");
    if (selectedItem && selectedItem.scrollIntoView) {
      selectedItem.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  }, [element]);
  useMutationObserver_default(observeChanges ? element : null, {
    subtree: true,
    attributes: true,
    attributeFilter: ["data-rw-focused"]
  }, scrollIntoView);
  return scrollIntoView;
};
function useHandleSelect(multiple, dataItems, onChange) {
  return (dataItem2, event) => {
    if (multiple === false) {
      onChange(dataItem2, {
        dataItem: dataItem2,
        lastValue: dataItems[0],
        originalEvent: event
      });
      return;
    }
    const checked = dataItems.includes(dataItem2);
    onChange(checked ? dataItems.filter((d) => d !== dataItem2) : [...dataItems, dataItem2], {
      dataItem: dataItem2,
      lastValue: dataItems,
      action: checked ? "remove" : "insert",
      originalEvent: event
    });
  };
}
var List = import_react12.default.forwardRef(function List2(_ref, outerRef) {
  var _elementProps$role;
  let {
    multiple = false,
    data = [],
    value,
    onChange,
    accessors,
    className,
    messages: messages2,
    disabled: disabled2,
    renderItem,
    renderGroup,
    searchTerm,
    groupBy,
    elementRef,
    optionComponent: Option = ListOption_default,
    renderList
  } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded3);
  const id = useInstanceId();
  const dataItems = makeArray(value, multiple);
  const groupedData = (0, import_react12.useMemo)(() => groupBy ? groupBySortedKeys(groupBy, data) : void 0, [data, groupBy]);
  const [element, ref] = useCallbackRef();
  const disabledItems = toItemArray(disabled2);
  const {
    emptyList
  } = useMessagesWithDefaults(messages2);
  const divRef = useMergedRefs_default(ref, elementRef);
  const handleSelect = useHandleSelect(multiple, dataItems, onChange);
  const scrollIntoView = useScrollFocusedIntoView(element, true);
  let elementProps = pickElementProps(props);
  (0, import_react12.useImperativeHandle)(outerRef, () => ({
    scrollIntoView
  }), [scrollIntoView]);
  function renderOption(item, idx) {
    const textValue = accessors.text(item);
    const itemIsDisabled = disabledItems.includes(item);
    const itemIsSelected = dataItems.includes(item);
    return import_react12.default.createElement(Option, {
      dataItem: item,
      key: `item_${idx}`,
      searchTerm,
      onSelect: handleSelect,
      disabled: itemIsDisabled,
      selected: itemIsSelected
    }, renderItem ? renderItem({
      item,
      searchTerm,
      index: idx,
      text: textValue,
      // TODO: probably remove
      value: accessors.value(item),
      disabled: itemIsDisabled
    }) : textValue);
  }
  const items = groupedData ? groupedData.map(([group, items2], idx) => import_react12.default.createElement("div", {
    role: "group",
    key: `group_${idx}`
  }, import_react12.default.createElement(ListOptionGroup_default, null, renderGroup ? renderGroup({
    group
  }) : group), items2.map(renderOption))) : data.map(renderOption);
  const rootProps = Object.assign({
    id,
    tabIndex: 0,
    ref: divRef
  }, elementProps, {
    "aria-multiselectable": !!multiple,
    className: (0, import_classnames4.default)(className, "rw-list"),
    role: (_elementProps$role = elementProps.role) != null ? _elementProps$role : "listbox",
    children: import_react12.default.Children.count(items) ? items : import_react12.default.createElement("div", {
      className: "rw-list-empty"
    }, emptyList())
  });
  return renderList ? renderList(rootProps) : import_react12.default.createElement("div", rootProps);
});
List.displayName = "List";
List.propTypes = propTypes4;
var List_default = List;

// node_modules/react-widgets/esm/Popup.js
var import_classnames6 = __toESM(require_classnames());
var import_react14 = __toESM(require_react());

// node_modules/react-widgets/esm/SlideDownTransition.js
var import_classnames5 = __toESM(require_classnames());

// node_modules/dom-helpers/esm/isDocument.js
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}

// node_modules/dom-helpers/esm/isWindow.js
function isWindow(node2) {
  if ("window" in node2 && node2.window === node2)
    return node2;
  if (isDocument(node2))
    return node2.defaultView || false;
  return false;
}

// node_modules/dom-helpers/esm/getScrollAccessor.js
function getscrollAccessor(offset2) {
  var prop = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
  function scrollAccessor(node2, val) {
    var win = isWindow(node2);
    if (val === void 0) {
      return win ? win[offset2] : node2[prop];
    }
    if (win) {
      win.scrollTo(win[offset2], val);
    } else {
      node2[prop] = val;
    }
  }
  return scrollAccessor;
}

// node_modules/dom-helpers/esm/scrollLeft.js
var scrollLeft_default = getscrollAccessor("pageXOffset");

// node_modules/dom-helpers/esm/scrollTop.js
var scrollTop_default = getscrollAccessor("pageYOffset");

// node_modules/dom-helpers/esm/offset.js
function offset(node2) {
  var doc = ownerDocument(node2);
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  var docElem = doc && doc.documentElement;
  if (!docElem || !contains(docElem, node2))
    return box;
  if (node2.getBoundingClientRect !== void 0)
    box = node2.getBoundingClientRect();
  box = {
    top: box.top + scrollTop_default(docElem) - (docElem.clientTop || 0),
    left: box.left + scrollLeft_default(docElem) - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}

// node_modules/dom-helpers/esm/height.js
function height(node2, client) {
  var win = isWindow(node2);
  return win ? win.innerHeight : client ? node2.clientHeight : offset(node2).height;
}

// node_modules/react-widgets/esm/SlideDownTransition.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react13 = __toESM(require_react());
var _excluded4 = ["children", "className", "dropUp"];
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var transitionClasses = {
  [ENTERING]: "rw-slide-transition-entering",
  [EXITING]: "rw-slide-transition-exiting",
  [EXITED]: "rw-slide-transition-exited"
};
var SlideDownTransition = class extends import_react13.default.Component {
  constructor(...args) {
    super(...args);
    this.setContainerHeight = (elem) => {
      elem.style.height = this.getHeight(elem) + "px";
    };
    this.clearContainerHeight = (elem) => {
      elem.style.height = "";
    };
    this.handleEntered = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onEntered)
        this.props.onEntered();
    };
    this.handleEntering = () => {
      if (this.props.onEntering)
        this.props.onEntering();
    };
    this.handleExit = (elem) => {
      this.setContainerHeight(elem);
      if (this.props.onExit)
        this.props.onExit();
    };
    this.handleExited = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onExited)
        this.props.onExited();
    };
    this.handleTransitionEnd = (el, done) => {
      transitionEnd(el.firstChild, done);
    };
  }
  getHeight(container) {
    let content = container.firstChild;
    let margin = parseInt(css_default(content, "margin-top"), 10) + parseInt(css_default(content, "margin-bottom"), 10);
    let old = container.style.display;
    let height2;
    container.style.display = "block";
    height2 = (height(content) || 0) + (isNaN(margin) ? 0 : margin);
    container.style.display = old;
    return height2;
  }
  render() {
    const _this$props = this.props, {
      children,
      className,
      dropUp
    } = _this$props, props = _objectWithoutPropertiesLoose4(_this$props, _excluded4);
    return import_react13.default.createElement(Transition_default, _extends3({}, props, {
      appear: true,
      in: this.props.in,
      onEnter: this.setContainerHeight,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered,
      onExit: this.handleExit,
      onExited: this.handleExited,
      addEndListener: this.handleTransitionEnd,
      timeout: void 0
      /*hack*/
    }), (status, innerProps) => import_react13.default.createElement("div", _extends3({}, innerProps, {
      className: (0, import_classnames5.default)(className, dropUp && "rw-dropup", transitionClasses[status])
    }), import_react13.default.cloneElement(children, {
      className: (0, import_classnames5.default)("rw-slide-transition", children.props.className)
    })));
  }
};
SlideDownTransition.propTypes = {
  in: import_prop_types4.default.bool.isRequired,
  innerClassName: import_prop_types4.default.string,
  dropUp: import_prop_types4.default.bool,
  onExit: import_prop_types4.default.func,
  onExited: import_prop_types4.default.func,
  onEntering: import_prop_types4.default.func,
  onEntered: import_prop_types4.default.func
};
var SlideDownTransition_default = SlideDownTransition;

// node_modules/react-widgets/esm/Popup.js
var _excluded5 = ["id", "role", "dropUp", "className", "children", "open", "transition"];
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StaticContainer = import_react14.default.memo(({
  children
}) => children, (_, {
  shouldUpdate
}) => !shouldUpdate);
var Popup = import_react14.default.forwardRef((_ref, ref) => {
  let {
    id,
    role,
    dropUp,
    className,
    children,
    open = false,
    transition = SlideDownTransition_default
  } = _ref, props = _objectWithoutPropertiesLoose5(_ref, _excluded5);
  const Transition = transition;
  return import_react14.default.createElement(Transition, _extends4({}, props, {
    in: open,
    dropUp,
    timeout: void 0,
    className: (0, import_classnames6.default)("rw-popup-container", className)
  }), import_react14.default.createElement("div", {
    id,
    className: "rw-popup",
    ref,
    role
  }, import_react14.default.createElement(StaticContainer, {
    shouldUpdate: open
  }, children)));
});
Popup.displayName = "Popup";
var Popup_default = Popup;

// node_modules/react-widgets/esm/Widget.js
var import_classnames7 = __toESM(require_classnames());
var import_react15 = __toESM(require_react());
var _excluded6 = ["className", "tabIndex", "focused", "open", "dropUp", "disabled", "readOnly", "autofilling"];
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useKeyboardNavigationCheck() {
  const [isNavigatingViaKeyboard, setIsNavigatingViaKeyboard] = (0, import_react15.useState)(false);
  useGlobalListener("keydown", ({
    key
  }) => {
    if (key == " " || key === "Tab" || key == "Enter" || key && key.indexOf("Arrow") !== -1) {
      setIsNavigatingViaKeyboard(true);
    }
  });
  useGlobalListener("mousedown", () => {
    setIsNavigatingViaKeyboard(false);
  });
  return isNavigatingViaKeyboard;
}
function useWidgetProps(props) {
  const tabIndex = props.tabIndex != null ? props.tabIndex : -1;
  const isKeyboardNavigating = useKeyboardNavigationCheck();
  return {
    tabIndex,
    "data-intent": isKeyboardNavigating ? "keyboard" : "mouse",
    className: (0, import_classnames7.default)(props.className, "rw-widget", props.disabled && "rw-state-disabled", props.readOnly && "rw-state-readonly", props.focused && "rw-state-focus", props.autofilling && "rw-webkit-autofill", props.open && `rw-open${props.dropUp ? "-up" : ""}`)
  };
}
var Widget = import_react15.default.forwardRef((_ref, ref) => {
  let {
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded6);
  const widgetProps = useWidgetProps({
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  });
  return import_react15.default.createElement("div", _extends5({
    ref
  }, props, widgetProps));
});
Widget.displayName = "Widget";
var Widget_default = Widget;

// node_modules/react-widgets/esm/WidgetPicker.js
var import_classnames8 = __toESM(require_classnames());
var import_react16 = __toESM(require_react());
var _excluded7 = ["className"];
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function WidgetPicker(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose7(_ref, _excluded7);
  return import_react16.default.createElement("div", _extends6({}, props, {
    className: (0, import_classnames8.default)(className, "rw-widget-picker", "rw-widget-container")
  }));
}
var WidgetPicker_default = WidgetPicker;

// node_modules/react-widgets/esm/A11y.js
var import_react17 = __toESM(require_react());
var setActiveDescendant = (ref, activeId) => {
  if (!ref)
    return;
  ref.removeAttribute("aria-activedescendant");
  if (activeId)
    ref.setAttribute("aria-activedescendant", activeId);
};
var useActiveDescendant = (ref, id, visible, deps) => {
  (0, import_react17.useEffect)(() => {
    setActiveDescendant(ref.current, visible ? id : "");
  }, [ref, id, visible, ...deps]);
};

// node_modules/react-widgets/esm/Accessors.js
var import_react18 = __toESM(require_react());
var dataValue = (dataItem2, field) => {
  if (typeof field === "function")
    return field(dataItem2);
  if (dataItem2 == null)
    return dataItem2;
  if (typeof field === "string" && typeof dataItem2 === "object" && field in dataItem2)
    return dataItem2[field];
  return dataItem2;
};
var dataText = (dataItem2, textField) => {
  const value = dataValue(dataItem2, textField);
  return value == null ? "" : String(value);
};
function valueMatcher(a, b, dataKey) {
  return dataValue(a, dataKey) === dataValue(b, dataKey);
}
function dataIndexOf(data, value, dataKey) {
  const valueDataKey = dataValue(value, dataKey);
  let idx = -1;
  while (++idx < data.length) {
    const datum = data[idx];
    if (datum === value || dataValue(datum, dataKey) === valueDataKey)
      return idx;
  }
  return -1;
}
function dataItem(data, value, dataKey) {
  const idx = dataIndexOf(data, value, dataKey);
  return idx !== -1 ? data[idx] : value;
}
var useAccessors = (textField, dataKey) => {
  return (0, import_react18.useMemo)(() => ({
    text: (item) => dataText(item, textField),
    value: (item) => dataValue(item, dataKey),
    indexOf: (data, value) => dataIndexOf(data, value, dataKey),
    matches: (a, b) => valueMatcher(a, b, dataKey),
    findOrSelf: (data, value) => dataItem(data, value, dataKey),
    includes: (data, value) => dataIndexOf(data, value, dataKey) !== -1
  }), [textField, dataKey]);
};

// node_modules/react-widgets/esm/Filter.js
var import_react19 = __toESM(require_react());
var presets = {
  eq: (a, b) => a === b,
  contains: (a, b) => a.indexOf(b) !== -1,
  startsWith: (a, b) => a.lastIndexOf(b, 0) === 0
};
function normalizeFilter(filter, textField) {
  if (filter === false)
    return null;
  if (typeof filter === "function")
    return filter;
  const filterPreset = presets[filter === true ? "startsWith" : filter || "eq"];
  return (item, searchTerm) => {
    let textValue = dataText(item, textField);
    return filterPreset(textValue.toLowerCase(), searchTerm.toLowerCase());
  };
}
function useFilteredData(data, filterer, searchTerm = "", textAccessor) {
  return (0, import_react19.useMemo)(() => {
    const filter = normalizeFilter(filterer, textAccessor);
    if (!filter || !searchTerm.trim())
      return data;
    return data.filter((item, idx) => filter(item, searchTerm, idx));
  }, [data, filterer, searchTerm, textAccessor]);
}

// node_modules/react-widgets/esm/canShowCreate.js
function canShowCreate(allowCreate, {
  searchTerm = "",
  data,
  dataItems,
  accessors
}) {
  const eq2 = (v) => accessors.text(v).toLowerCase() === searchTerm.toLowerCase();
  const hasExtactMatch = () => dataItems && dataItems.some(eq2) || data.some(eq2);
  return !!((allowCreate === true || allowCreate === "onFilter" && searchTerm) && !hasExtactMatch());
}

// node_modules/react-widgets/esm/useAutoFocus.js
var import_react20 = __toESM(require_react());
function useAutoFocus(autoFocus, ref) {
  (0, import_react20.useEffect)(() => {
    if (autoFocus && ref.current)
      ref.current.focus();
  }, []);
}

// node_modules/react-widgets/esm/useDropdownToggle.js
function useDropdownToggle(isOpen, onToggle) {
  function open() {
    if (!isOpen)
      notify(onToggle, [true]);
  }
  function close() {
    if (isOpen)
      notify(onToggle, [false]);
  }
  function toggle() {
    if (isOpen)
      close();
    else
      open();
  }
  toggle.open = open;
  toggle.close = close;
  return toggle;
}

// node_modules/react-widgets/esm/useFocusManager.js
var import_react22 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useFocusManager.js
var import_react21 = __toESM(require_react());
function useFocusManager(opts) {
  var isMounted = useMounted();
  var lastFocused = (0, import_react21.useRef)();
  var handle = (0, import_react21.useRef)();
  var willHandle = useEventCallback(opts.willHandle);
  var didHandle = useEventCallback(opts.didHandle);
  var onChange = useEventCallback(opts.onChange);
  var isDisabled = useEventCallback(opts.isDisabled);
  var handleFocusChange = (0, import_react21.useCallback)(function(focused, event) {
    if (event && event.persist)
      event.persist();
    if (willHandle && willHandle(focused, event) === false)
      return;
    clearTimeout(handle.current);
    handle.current = window.setTimeout(function() {
      if (focused !== lastFocused.current) {
        if (didHandle)
          didHandle(focused, event);
        if (isMounted() || !focused) {
          lastFocused.current = focused;
          onChange && onChange(focused, event);
        }
      }
    });
  }, [isMounted, willHandle, didHandle, onChange, lastFocused]);
  var handleBlur = (0, import_react21.useCallback)(function(event) {
    if (!isDisabled())
      handleFocusChange(false, event);
  }, [handleFocusChange, isDisabled]);
  var handleFocus = (0, import_react21.useCallback)(function(event) {
    if (!isDisabled())
      handleFocusChange(true, event);
  }, [handleFocusChange, isDisabled]);
  return (0, import_react21.useMemo)(function() {
    return {
      onBlur: handleBlur,
      onFocus: handleFocus
    };
  }, [handleBlur, handleFocus]);
}

// node_modules/dom-helpers/esm/matches.js
var matchesImpl;
function matches(node2, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl2(n, s) {
      return nativeMatch.call(n, s);
    };
  }
  return matchesImpl(node2, selector);
}

// node_modules/react-widgets/esm/useFocusManager.js
var isInDisabledFieldset = (node2) => {
  return !!node2 && matches(node2, "fieldset[disabled] *");
};
function useFocusManager2(ref, props = {}, opts = {}) {
  const isMounted = useMounted();
  const [focused, setFocus] = (0, import_react22.useState)(false);
  const isDisabled = useEventCallback(() => props.disabled === true || isInDisabledFieldset(ref.current));
  const events = useFocusManager(Object.assign({}, opts, {
    isDisabled,
    onChange: (focused2) => {
      if (isMounted())
        setFocus(focused2);
    },
    didHandle(focused2, event) {
      let handler = props[focused2 ? "onFocus" : "onBlur"];
      if (handler)
        handler(event);
      if (opts.didHandle && !event.isWidgetDefaultPrevented)
        opts.didHandle(focused2, event);
    }
  }));
  return [events, focused, setFocus];
}

// node_modules/react-widgets/esm/Localization.js
var import_react23 = __toESM(require_react());

// node_modules/date-arithmetic/index.js
var date_arithmetic_exports = {};
__export(date_arithmetic_exports, {
  add: () => add,
  century: () => century,
  date: () => date,
  day: () => day,
  decade: () => decade,
  diff: () => diff,
  endOf: () => endOf,
  eq: () => eq,
  gt: () => gt,
  gte: () => gte,
  hours: () => hours,
  inRange: () => inRange,
  lt: () => lt,
  lte: () => lte,
  max: () => max,
  milliseconds: () => milliseconds,
  min: () => min,
  minutes: () => minutes,
  month: () => month,
  neq: () => neq,
  seconds: () => seconds,
  startOf: () => startOf,
  subtract: () => subtract,
  weekday: () => weekday,
  year: () => year
});
var MILI = "milliseconds";
var SECONDS = "seconds";
var MINUTES = "minutes";
var HOURS = "hours";
var DAY = "day";
var WEEK = "week";
var MONTH = "month";
var YEAR = "year";
var DECADE = "decade";
var CENTURY = "century";
var multiplierMilli = {
  "milliseconds": 1,
  "seconds": 1e3,
  "minutes": 60 * 1e3,
  "hours": 60 * 60 * 1e3,
  "day": 24 * 60 * 60 * 1e3,
  "week": 7 * 24 * 60 * 60 * 1e3
};
var multiplierMonth = {
  "month": 1,
  "year": 12,
  "decade": 10 * 12,
  "century": 100 * 12
};
function daysOf(year2) {
  return [31, daysInFeb(year2), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
}
function daysInFeb(year2) {
  return year2 % 4 === 0 && year2 % 100 !== 0 || year2 % 400 === 0 ? 29 : 28;
}
function add(d, num, unit) {
  d = new Date(d);
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      return addMillis(d, num * multiplierMilli[unit]);
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      return addMonths(d, num * multiplierMonth[unit]);
  }
  throw new TypeError('Invalid units: "' + unit + '"');
}
function addMillis(d, num) {
  var nextDate = new Date(+d + num);
  return solveDST(d, nextDate);
}
function addMonths(d, num) {
  var year2 = d.getFullYear(), month2 = d.getMonth(), day2 = d.getDate(), totalMonths = year2 * 12 + month2 + num, nextYear = Math.trunc(totalMonths / 12), nextMonth = totalMonths % 12, nextDay = Math.min(day2, daysOf(nextYear)[nextMonth]);
  var nextDate = new Date(d);
  nextDate.setFullYear(nextYear);
  nextDate.setDate(1);
  nextDate.setMonth(nextMonth);
  nextDate.setDate(nextDay);
  return nextDate;
}
function solveDST(currentDate, nextDate) {
  var currentOffset = currentDate.getTimezoneOffset(), nextOffset = nextDate.getTimezoneOffset();
  var diffMinutes = nextOffset - currentOffset;
  return new Date(+nextDate + diffMinutes * multiplierMilli["minutes"]);
}
function subtract(d, num, unit) {
  return add(d, -num, unit);
}
function startOf(d, unit, firstOfWeek) {
  d = new Date(d);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
      d = month(d, 0);
    case MONTH:
      d = date(d, 1);
    case WEEK:
    case DAY:
      d = hours(d, 0);
    case HOURS:
      d = minutes(d, 0);
    case MINUTES:
      d = seconds(d, 0);
    case SECONDS:
      d = milliseconds(d, 0);
  }
  if (unit === DECADE)
    d = subtract(d, year(d) % 10, "year");
  if (unit === CENTURY)
    d = subtract(d, year(d) % 100, "year");
  if (unit === WEEK)
    d = weekday(d, 0, firstOfWeek);
  return d;
}
function endOf(d, unit, firstOfWeek) {
  d = new Date(d);
  d = startOf(d, unit, firstOfWeek);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
    case MONTH:
    case WEEK:
      d = add(d, 1, unit);
      d = subtract(d, 1, DAY);
      d.setHours(23, 59, 59, 999);
      break;
    case DAY:
      d.setHours(23, 59, 59, 999);
      break;
    case HOURS:
    case MINUTES:
    case SECONDS:
      d = add(d, 1, unit);
      d = subtract(d, 1, MILI);
  }
  return d;
}
var eq = createComparer(function(a, b) {
  return a === b;
});
var neq = createComparer(function(a, b) {
  return a !== b;
});
var gt = createComparer(function(a, b) {
  return a > b;
});
var gte = createComparer(function(a, b) {
  return a >= b;
});
var lt = createComparer(function(a, b) {
  return a < b;
});
var lte = createComparer(function(a, b) {
  return a <= b;
});
function min() {
  return new Date(Math.min.apply(Math, arguments));
}
function max() {
  return new Date(Math.max.apply(Math, arguments));
}
function inRange(day2, min2, max2, unit) {
  unit = unit || "day";
  return (!min2 || gte(day2, min2, unit)) && (!max2 || lte(day2, max2, unit));
}
var milliseconds = createAccessor("Milliseconds");
var seconds = createAccessor("Seconds");
var minutes = createAccessor("Minutes");
var hours = createAccessor("Hours");
var day = createAccessor("Day");
var date = createAccessor("Date");
var month = createAccessor("Month");
var year = createAccessor("FullYear");
function decade(d, val) {
  return val === void 0 ? year(startOf(d, DECADE)) : add(d, val + 10, YEAR);
}
function century(d, val) {
  return val === void 0 ? year(startOf(d, CENTURY)) : add(d, val + 100, YEAR);
}
function weekday(d, val, firstDay) {
  var w = (day(d) + 7 - (firstDay || 0)) % 7;
  return val === void 0 ? w : add(d, val - w, DAY);
}
function diff(date1, date2, unit, asFloat) {
  var dividend, divisor, result;
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      dividend = date2.getTime() - date1.getTime();
      break;
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1);
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  switch (unit) {
    case MILI:
      divisor = 1;
      break;
    case SECONDS:
      divisor = 1e3;
      break;
    case MINUTES:
      divisor = 1e3 * 60;
      break;
    case HOURS:
      divisor = 1e3 * 60 * 60;
      break;
    case DAY:
      divisor = 1e3 * 60 * 60 * 24;
      break;
    case WEEK:
      divisor = 1e3 * 60 * 60 * 24 * 7;
      break;
    case MONTH:
      divisor = 1;
      break;
    case YEAR:
      divisor = 12;
      break;
    case DECADE:
      divisor = 120;
      break;
    case CENTURY:
      divisor = 1200;
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  result = dividend / divisor;
  return asFloat ? result : Math.round(result);
}
function createAccessor(method) {
  var hourLength = function(method2) {
    switch (method2) {
      case "Milliseconds":
        return 36e5;
      case "Seconds":
        return 3600;
      case "Minutes":
        return 60;
      case "Hours":
        return 1;
      default:
        return null;
    }
  }(method);
  return function(d, val) {
    if (val === void 0)
      return d["get" + method]();
    var dateOut = new Date(d);
    dateOut["set" + method](val);
    if (hourLength && dateOut["get" + method]() != val && (method === "Hours" || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {
      dateOut["set" + method](val + hourLength);
    }
    return dateOut;
  };
}
function createComparer(operator) {
  return function(a, b, unit) {
    return operator(+startOf(a, unit), +startOf(b, unit));
  };
}

// node_modules/react-widgets/esm/dates.js
var isNullOrInvalid = (dte) => dte == null || isNaN(+dte);
var dates = Object.assign({}, date_arithmetic_exports, {
  merge(date2, time, defaultDate) {
    if (isNullOrInvalid(time) && isNullOrInvalid(date2) == null)
      return null;
    if (isNullOrInvalid(time))
      time = defaultDate || /* @__PURE__ */ new Date();
    if (isNullOrInvalid(date2))
      date2 = defaultDate || /* @__PURE__ */ new Date();
    date2 = dates.startOf(date2, "day");
    date2 = dates.hours(date2, dates.hours(time));
    date2 = dates.minutes(date2, dates.minutes(time));
    date2 = dates.seconds(date2, dates.seconds(time));
    return dates.milliseconds(date2, dates.milliseconds(time));
  }
});
var dates_default = dates;

// node_modules/react-widgets/esm/IntlLocalizer.js
var supportStyles = false;
new Intl.DateTimeFormat(void 0, {
  // @ts-ignore
  get dateStyle() {
    supportStyles = true;
  }
});
var dateShort = {
  day: "numeric",
  month: "numeric",
  year: "numeric"
};
var timeShort = {
  hour: "numeric",
  minute: "numeric"
};
var getFormatter = (culture, options) => Intl.DateTimeFormat(culture, options).format;
var IntlDateLocalizer = class {
  constructor({
    culture = void 0,
    firstOfWeek = 0
  } = {}) {
    this.culture = culture;
    this.firstOfWeek = () => firstOfWeek;
    function normalizeFormat(date2, format) {
      return typeof format === "function" ? format(date2, culture) : date2.toLocaleString(culture, format);
    }
    const formats = {
      date: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short"
        } : dateShort
      ),
      time: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          timeStyle: "short"
        } : timeShort
      ),
      datetime: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short",
          timeStyle: "short"
        } : Object.assign({}, dateShort, timeShort)
      ),
      header: getFormatter(culture, {
        month: "short",
        year: "numeric"
      }),
      weekday: getFormatter(culture, {
        weekday: "narrow"
      }),
      dayOfMonth: getFormatter(culture, {
        day: "2-digit"
      }),
      month: getFormatter(culture, {
        month: "short"
      }),
      year: getFormatter(culture, {
        year: "numeric"
      }),
      decade: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "decade"))}`,
      century: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "century"))}`
    };
    Object.keys(formats).forEach((key) => {
      this[key] = (date2, format) => format ? normalizeFormat(date2, format) : formats[key](date2);
    });
  }
  toFormattedParts(date2, format = {
    dateStyle: "short",
    timeStyle: "short"
  }) {
    return Intl.DateTimeFormat(this.culture, format).formatToParts(date2).filter((p) => p.type !== "timeZoneName");
  }
  parse(value) {
    const date2 = new Date(value);
    return isNaN(+date2) ? null : date2;
  }
};
var IntlNumberLocalizer = class {
  constructor({
    culture = void 0
  } = {}) {
    var _$toLocaleString$m;
    this.culture = culture;
    const decimal = "formatToParts" in Intl.NumberFormat(culture) ? Intl.NumberFormat(culture).formatToParts(1.1)[1].value : ((_$toLocaleString$m = 1.1.toLocaleString(culture).match(/[^\d]/)) == null ? void 0 : _$toLocaleString$m[0]) || ".";
    const formatter = Intl.NumberFormat(culture).format;
    this.decimalCharacter = () => decimal;
    this.format = (num, format) => {
      if (format) {
        return typeof format === "function" ? format(num, culture) : num.toLocaleString(culture, format);
      }
      return formatter(num);
    };
  }
  parse(value) {
    return parseFloat(value.replace(this.decimalCharacter(), "."));
  }
};

// node_modules/react-widgets/esm/Localization.js
function mergeWithDefaults(date2, number, messages2, formatOverrides = {}) {
  if (!date2 && !number)
    throw new Error("This component requires a Localizer but none was provided");
  return {
    formatOverrides,
    messages: getMessages(messages2),
    formatDate(value, format, userFormat) {
      return date2[format](value, userFormat != null ? userFormat : this.formatOverrides[format]);
    },
    formatNumber(value, userFormat) {
      return number.format(value, userFormat != null ? userFormat : this.formatOverrides.number);
    },
    parseDate: date2.parse.bind(date2),
    parseNumber: number.parse.bind(number),
    decimalCharacter: number.decimalCharacter.bind(number),
    firstOfWeek: date2.firstOfWeek.bind(date2)
  };
}
var LocalizerContext = import_react23.default.createContext(mergeWithDefaults(new IntlDateLocalizer(), new IntlNumberLocalizer()));
var Localization = ({
  date: _date = new IntlDateLocalizer(),
  number: _number = new IntlNumberLocalizer(),
  messages: messages2,
  children
}) => {
  const localizer = (0, import_react23.useMemo)(() => mergeWithDefaults(_date, _number, messages2), [
    _date,
    _number,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    JSON.stringify(messages2)
  ]);
  return import_react23.default.createElement(LocalizerContext.Provider, {
    value: localizer
  }, children);
};
var useLocalizer = (messages2, formats) => {
  const localizer = (0, import_react23.useContext)(LocalizerContext);
  return (0, import_react23.useMemo)(() => {
    if (!messages2 && !formats)
      return localizer;
    return Object.assign({}, localizer, {
      messages: getMessages(Object.assign({}, localizer.messages, messages2)),
      formatOverrides: Object.assign({}, localizer.formatOverrides, formats)
    });
  }, [messages2, formats, localizer]);
};
Localization.useLocalizer = useLocalizer;
var Localization_default = Localization;

// node_modules/react-widgets/esm/PickerCaret.js
var import_classnames9 = __toESM(require_classnames());
var React14 = __toESM(require_react());
var _excluded8 = ["className", "busy", "visible", "icon", "spinner"];
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DropdownCaret = (_ref) => {
  let {
    className,
    busy,
    visible,
    icon = caretDown,
    spinner = Spinner
  } = _ref, props = _objectWithoutPropertiesLoose8(_ref, _excluded8);
  return React14.createElement("span", _extends7({}, props, {
    "aria-hidden": "true",
    className: (0, import_classnames9.default)(className, "rw-btn rw-picker-caret")
  }), busy ? spinner : visible ? icon : null);
};
var PickerCaret_default = DropdownCaret;

// node_modules/react-widgets/esm/DropdownList.js
var _excluded9 = ["id", "autoFocus", "textField", "dataKey", "value", "defaultValue", "onChange", "open", "defaultOpen", "onToggle", "searchTerm", "defaultSearchTerm", "onSearch", "filter", "allowCreate", "delay", "focusFirstItem", "className", "containerClassName", "placeholder", "busy", "disabled", "readOnly", "selectIcon", "busySpinner", "dropUp", "tabIndex", "popupTransition", "name", "autoComplete", "onSelect", "onCreate", "onKeyPress", "onKeyDown", "onClick", "inputProps", "listProps", "popupProps", "renderListItem", "renderListGroup", "optionComponent", "renderValue", "groupBy", "onBlur", "onFocus", "listComponent", "popupComponent", "data", "messages"];
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes5 = {
  value: import_prop_types5.default.any,
  /**
   * @type {function (
   *  dataItems: ?any,
   *  metadata: {
   *    lastValue: ?any,
   *    searchTerm: ?string
   *    originalEvent: SyntheticEvent,
   *  }
   * ): void}
   */
  onChange: import_prop_types5.default.func,
  open: import_prop_types5.default.bool,
  onToggle: import_prop_types5.default.func,
  data: import_prop_types5.default.array,
  dataKey: accessor,
  textField: accessor,
  allowCreate: import_prop_types5.default.oneOf([true, false, "onFilter"]),
  /**
   * A React render prop for customizing the rendering of the DropdownList
   * value
   */
  renderValue: import_prop_types5.default.func,
  renderListItem: import_prop_types5.default.func,
  listComponent: elementType2,
  optionComponent: elementType2,
  renderPopup: import_prop_types5.default.func,
  renderListGroup: import_prop_types5.default.func,
  groupBy: accessor,
  /**
   *
   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}
   */
  onSelect: import_prop_types5.default.func,
  onCreate: import_prop_types5.default.func,
  /**
   * @type function(searchTerm: string, metadata: { action, lastSearchTerm, originalEvent? })
   */
  onSearch: import_prop_types5.default.func,
  searchTerm: import_prop_types5.default.string,
  busy: import_prop_types5.default.bool,
  /** Specify the element used to render the select (down arrow) icon. */
  selectIcon: import_prop_types5.default.node,
  /** Specify the element used to render the busy indicator */
  busySpinner: import_prop_types5.default.node,
  placeholder: import_prop_types5.default.string,
  dropUp: import_prop_types5.default.bool,
  popupTransition: elementType2,
  disabled: disabled.acceptsArray,
  readOnly: disabled,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types5.default.string,
  inputProps: import_prop_types5.default.object,
  listProps: import_prop_types5.default.object,
  messages: import_prop_types5.default.shape({
    open: import_prop_types5.default.string,
    emptyList: message,
    emptyFilter: message,
    createOption: message
  })
};
function useSearchWordBuilder(delay) {
  const timeout = useTimeout();
  const wordRef = (0, import_react24.useRef)("");
  function search(character, cb) {
    let word = (wordRef.current + character).toLowerCase();
    if (!character)
      return;
    wordRef.current = word;
    timeout.set(() => {
      wordRef.current = "";
      cb(word);
    }, delay);
  }
  return search;
}
var DropdownListImpl = import_react24.default.forwardRef(function DropdownList(_ref, outerRef) {
  let {
    id,
    autoFocus,
    textField,
    dataKey,
    value,
    defaultValue,
    onChange,
    open,
    defaultOpen = false,
    onToggle,
    searchTerm,
    defaultSearchTerm = "",
    onSearch,
    filter = true,
    allowCreate = false,
    delay = 500,
    focusFirstItem,
    className,
    containerClassName,
    placeholder,
    busy,
    disabled: disabled2,
    readOnly,
    selectIcon = caretDown,
    busySpinner,
    dropUp,
    tabIndex,
    popupTransition,
    name,
    autoComplete,
    onSelect,
    onCreate,
    onKeyPress,
    onKeyDown,
    onClick,
    inputProps,
    listProps,
    popupProps,
    renderListItem,
    renderListGroup,
    optionComponent,
    renderValue,
    groupBy,
    onBlur,
    onFocus,
    listComponent: ListComponent = List_default,
    popupComponent: Popup2 = Popup_default,
    data: rawData = [],
    messages: userMessages
  } = _ref, elementProps = _objectWithoutPropertiesLoose9(_ref, _excluded9);
  const [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);
  const [currentSearch, handleSearch] = useUncontrolledProp(searchTerm, defaultSearchTerm, onSearch);
  const ref = (0, import_react24.useRef)(null);
  const filterRef = (0, import_react24.useRef)(null);
  const listRef = (0, import_react24.useRef)(null);
  const inputId = useInstanceId(id, "_input");
  const listId = useInstanceId(id, "_listbox");
  const activeId = useInstanceId(id, "_listbox_active_option");
  const accessors = useAccessors(textField, dataKey);
  const localizer = useLocalizer(userMessages);
  useAutoFocus(!!autoFocus, ref);
  const toggle = useDropdownToggle(currentOpen, handleOpen);
  const isDisabled = disabled2 === true;
  const isReadOnly = !!readOnly;
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2) {
      if (focused2) {
        if (filter)
          focus();
        return;
      }
      toggle.close();
      clearSearch();
    }
  });
  const data = useFilteredData(rawData, currentOpen ? filter : false, currentSearch, accessors.text);
  const selectedItem = (0, import_react24.useMemo)(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);
  const list = useFocusList({
    activeId,
    scope: ref,
    focusFirstItem,
    anchorItem: currentOpen ? selectedItem : void 0
  });
  const [autofilling, setAutofilling] = (0, import_react24.useState)(false);
  const nextSearchChar = useSearchWordBuilder(delay);
  const focusedItem = list.getFocused();
  useActiveDescendant(ref, activeId, focusedItem && currentOpen, [focusedItem]);
  const showCreateOption = canShowCreate(allowCreate, {
    searchTerm: currentSearch,
    data,
    accessors
  });
  const handleCreate = (event) => {
    notify(onCreate, [currentSearch]);
    clearSearch(event);
    toggle.close();
    focus();
  };
  const handleSelect = (dataItem2, originalEvent) => {
    if (readOnly || isDisabled)
      return;
    if (dataItem2 === void 0)
      return;
    originalEvent == null ? void 0 : originalEvent.preventDefault();
    if (dataItem2 === CREATE_OPTION) {
      handleCreate(originalEvent);
      return;
    }
    notify(onSelect, [dataItem2, {
      originalEvent
    }]);
    change(dataItem2, originalEvent, true);
    toggle.close();
    focus();
  };
  const handleClick = (e) => {
    if (readOnly || isDisabled)
      return;
    e.preventDefault();
    focus();
    toggle();
    notify(onClick, [e]);
  };
  const handleKeyDown = (e) => {
    if (readOnly || isDisabled)
      return;
    let {
      key,
      altKey,
      ctrlKey,
      shiftKey
    } = e;
    notify(onKeyDown, [e]);
    let closeWithFocus = () => {
      clearSearch();
      toggle.close();
      if (currentOpen)
        setTimeout(focus);
    };
    if (e.defaultPrevented)
      return;
    if (key === "End" && currentOpen && !shiftKey) {
      e.preventDefault();
      list.focus(list.last());
    } else if (key === "Home" && currentOpen && !shiftKey) {
      e.preventDefault();
      list.focus(list.first());
    } else if (key === "Escape" && (currentOpen || currentSearch)) {
      e.preventDefault();
      closeWithFocus();
    } else if (key === "Enter" && currentOpen && ctrlKey && showCreateOption) {
      e.preventDefault();
      handleCreate(e);
    } else if ((key === "Enter" || key === " " && !filter) && currentOpen) {
      e.preventDefault();
      if (list.hasFocused())
        handleSelect(list.getFocused(), e);
    } else if (key === "ArrowDown") {
      e.preventDefault();
      if (!currentOpen) {
        toggle.open();
        return;
      }
      list.focus(list.next());
    } else if (key === "ArrowUp") {
      e.preventDefault();
      if (altKey)
        return closeWithFocus();
      list.focus(list.prev());
    }
  };
  const handleKeyPress = (e) => {
    if (readOnly || isDisabled)
      return;
    notify(onKeyPress, [e]);
    if (e.defaultPrevented || filter)
      return;
    nextSearchChar(String.fromCharCode(e.which), (word) => {
      if (!currentOpen)
        return;
      let isValid = (item) => presets.startsWith(accessors.text(item).toLowerCase(), word.toLowerCase());
      const [items, focusedItem2] = list.get();
      const len = items.length;
      const startIdx = items.indexOf(focusedItem2) + 1;
      const offset2 = startIdx >= len ? 0 : startIdx;
      let idx = 0;
      let pointer = offset2;
      while (idx < len) {
        pointer = (idx + offset2) % len;
        let item = items[pointer];
        if (isValid(list.toDataItem(item)))
          break;
        idx++;
      }
      if (idx === len)
        return;
      list.focus(items[pointer]);
    });
  };
  const handleInputChange = (e) => {
    if (!currentOpen && !e.target.value.trim()) {
      e.preventDefault();
    } else {
      search(e.target.value, e, "input");
    }
    toggle.open();
  };
  const handleAutofillChange = (e) => {
    let filledValue = e.target.value.toLowerCase();
    if (filledValue === "")
      return void change(null);
    for (const item of rawData) {
      if (String(accessors.value(item)).toLowerCase() === filledValue || accessors.text(item).toLowerCase() === filledValue) {
        change(item, e);
        break;
      }
    }
  };
  function change(nextValue, originalEvent, selected = false) {
    if (!accessors.matches(nextValue, currentValue)) {
      notify(handleChange, [nextValue, {
        originalEvent,
        source: selected ? "listbox" : "input",
        lastValue: currentValue,
        searchTerm: currentSearch
      }]);
      clearSearch(originalEvent);
      toggle.close();
    }
  }
  function focus() {
    if (filter)
      filterRef.current.focus();
    else
      ref.current.focus();
  }
  function clearSearch(originalEvent) {
    search("", originalEvent, "clear");
  }
  function search(nextSearchTerm, originalEvent, action = "input") {
    if (currentSearch !== nextSearchTerm)
      handleSearch(nextSearchTerm, {
        action,
        originalEvent,
        lastSearchTerm: currentSearch
      });
  }
  (0, import_react24.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let valueItem = accessors.findOrSelf(data, currentValue);
  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);
  const widgetProps = Object.assign({}, elementProps, {
    role: "combobox",
    id: inputId,
    //tab index when there is no filter input to take focus
    tabIndex: filter ? -1 : tabIndex || 0,
    // FIXME: only when item exists
    "aria-owns": elementProps["aria-owns"] ? `${listId} ${elementProps["aria-owns"]}` : listId,
    "aria-controls": elementProps["aria-controls"] ? `${listId} ${elementProps["aria-controls"]}` : listId,
    "aria-expanded": !!currentOpen,
    "aria-haspopup": "listbox",
    "aria-busy": !!busy,
    "aria-live": currentOpen ? "polite" : void 0,
    "aria-autocomplete": "list",
    "aria-disabled": isDisabled,
    "aria-readonly": isReadOnly
  });
  return import_react24.default.createElement(FocusListContext.Provider, {
    value: list.context
  }, import_react24.default.createElement(Widget_default, _extends8({}, widgetProps, {
    open: !!currentOpen,
    dropUp: !!dropUp,
    focused: !!focused,
    disabled: isDisabled,
    readOnly: isReadOnly,
    autofilling
  }, focusEvents, {
    onKeyDown: handleKeyDown,
    onKeyPress: handleKeyPress,
    className: (0, import_classnames10.default)(className, "rw-dropdown-list"),
    ref
  }), import_react24.default.createElement(WidgetPicker_default, {
    onClick: handleClick,
    tabIndex: filter ? -1 : 0,
    className: (0, import_classnames10.default)(containerClassName, "rw-widget-input")
  }, import_react24.default.createElement(DropdownListInput_default, _extends8({}, inputProps, {
    value: valueItem,
    dataKeyAccessor: accessors.value,
    textAccessor: accessors.text,
    name,
    readOnly,
    disabled: isDisabled,
    allowSearch: !!filter,
    searchTerm: currentSearch,
    ref: filterRef,
    autoComplete,
    onSearch: handleInputChange,
    onAutofill: setAutofilling,
    onAutofillChange: handleAutofillChange,
    placeholder,
    renderValue
  })), import_react24.default.createElement(PickerCaret_default, {
    visible: true,
    busy,
    icon: selectIcon,
    spinner: busySpinner
  })), shouldRenderPopup && import_react24.default.createElement(Popup2, _extends8({}, popupProps, {
    dropUp,
    open: currentOpen,
    transition: popupTransition,
    onEntered: focus,
    onEntering: () => listRef.current.scrollIntoView()
  }), import_react24.default.createElement(ListComponent, _extends8({}, listProps, {
    id: listId,
    data,
    tabIndex: -1,
    disabled: disabled2,
    groupBy,
    searchTerm: currentSearch,
    accessors,
    renderItem: renderListItem,
    renderGroup: renderListGroup,
    optionComponent,
    value: selectedItem,
    onChange: (d, meta) => handleSelect(d, meta.originalEvent),
    "aria-live": currentOpen ? "polite" : void 0,
    "aria-labelledby": inputId,
    "aria-hidden": !currentOpen,
    ref: listRef,
    messages: {
      emptyList: rawData.length ? localizer.messages.emptyFilter : localizer.messages.emptyList
    }
  })), showCreateOption && import_react24.default.createElement(AddToListOption_default, {
    onSelect: handleCreate
  }, localizer.messages.createOption(currentValue, currentSearch || "")))));
});
DropdownListImpl.displayName = "DropdownList";
DropdownListImpl.propTypes = propTypes5;
var DropdownList_default = DropdownListImpl;

export {
  caretUp,
  caretDown,
  chevronRight,
  chevronLeft,
  calendar,
  times,
  Spinner,
  isNullOrInvalid,
  dates_default,
  matches,
  useFocusManager2 as useFocusManager,
  makeArray,
  chunk,
  useMessagesWithDefaults,
  useLocalizer,
  Localization_default,
  useWidgetProps,
  Widget_default,
  useAutoFocus,
  notify,
  useInstanceId,
  useFirstFocusedRender,
  FocusListContext,
  useListOption,
  useFocusList,
  disabled,
  accessor,
  message,
  useHandleSelect,
  List_default,
  SlideDownTransition_default,
  Popup_default,
  WidgetPicker_default,
  setActiveDescendant,
  useActiveDescendant,
  useAccessors,
  useFilteredData,
  useDropdownToggle,
  CREATE_OPTION,
  AddToListOption_default,
  canShowCreate,
  PickerCaret_default,
  DropdownList_default
};
/*! Bundled license information:

react-widgets/esm/Icon.js:
  (*!
  Font Awesome Free 5.2.0 by @fontawesome - https://fontawesome.com
  License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
  *)
*/
//# sourceMappingURL=chunk-GYCTZDAM.js.map
